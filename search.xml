<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>层叠样式表——CSS</title>
    <url>/2020/09/24/CSS/</url>
    <content><![CDATA[<!--  -->
<h3 id="Ⅰ-CSS书写样式"><a href="#Ⅰ-CSS书写样式" class="headerlink" title="Ⅰ.CSS书写样式"></a>Ⅰ.CSS书写样式</h3><p><strong>1. 行内式</strong></p>
<img src="/2020/09/24/CSS/%E8%A1%8C%E5%86%85%E5%BC%8Fcss.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/行内式css.jpg) -->
<p><strong>2. 内嵌式</strong></p>
<img src="/2020/09/24/CSS/%E5%86%85%E5%B5%8C%E5%BC%8Fcss.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/内嵌式css.jpg) -->
<p><strong>3. 外链式</strong></p>
<img src="/2020/09/24/CSS/%E5%A4%96%E9%93%BE%E5%BC%8Fcss.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/外链式css.jpg) -->

<hr>
<img src="/2020/09/24/CSS/%E4%B9%A6%E5%86%99%E6%A0%B7%E5%BC%8F.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/书写样式.jpg) -->

<hr>
<span id="more"></span>
<p><strong>4. 属性书写</strong></p>
<ol>
<li>属性书写以键值对形式出现，即属性：属性值</li>
<li>行内式属性优先级高于另外两种书写形式</li>
</ol>
<h3 id="Ⅱ-CSS的三大特性"><a href="#Ⅱ-CSS的三大特性" class="headerlink" title="Ⅱ.CSS的三大特性"></a>Ⅱ.CSS的三大特性</h3><ol>
<li>层叠性：代码自上而下，后书写的样式会覆盖之前写的同选择器中同属性名的属性值<img src="/2020/09/24/CSS/%E5%B1%82%E5%8F%A0%E6%80%A70.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/层叠性0.jpg) -->
<img src="/2020/09/24/CSS/%E5%B1%82%E5%8F%A0%E6%80%A71.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/层叠性1.jpg) -->
其中width(宽度)和height(高度)就是被覆盖的属性</li>
<li>继承性：未标注的属性值会默认继承父元素的属性<img src="/2020/09/24/CSS/%E7%BB%A7%E6%89%BF%E6%80%A70.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/继承性0.jpg) -->
<img src="/2020/09/24/CSS/%E7%BB%A7%E6%89%BF%E6%80%A71.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/继承性1.jpg) -->
其中width(宽度)被子元素继承，而height(高度)就是自身的属性</li>
<li>优先级：css选择中不同的选择器是有不同的权重的，权重分为四个等级[0，0，0，0]他们被[ , ]逗号分隔每个位置的权重只能在自己位置上叠加但是不存在进位，从左往右权重等级依次递减，高权重等级绝对优先于低权重等级，无论权重数值，例如[1，0，0，0]优先级高于[0，1，1，1]<br>ps：继承的权重是[0，0，0，0]，行内样式style的权重是[1，0，0，0]</li>
</ol>
<h3 id="Ⅲ-CSS的选择器"><a href="#Ⅲ-CSS的选择器" class="headerlink" title="Ⅲ.CSS的选择器"></a>Ⅲ.CSS的选择器</h3><p><em>普通选择器</em></p>
<ol>
<li>通配符选择器——权重 <strong>[0，0，0，0]</strong><pre><code> *(星号) &#123;
     属性名：属性值；
 &#125;
</code></pre>
<img src="/2020/09/24/CSS/%E9%80%9A%E9%85%8D%E7%AC%A6%E9%80%89%E6%8B%A9%E5%99%A8.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/通配符选择器.jpg) --></li>
<li>元素选择器——权重 <strong>[0，0，0，1]</strong><pre><code> div (元素名) &#123;
     属性名：属性值；
 &#125;
</code></pre>
<img src="/2020/09/24/CSS/%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/元素选择器.jpg) --></li>
<li>类选择器——权重 <strong>[0，0，1，0]</strong><pre><code> .class (类名) &#123;
     属性名：属性值；
 &#125;
</code></pre>
<img src="/2020/09/24/CSS/%E7%B1%BBimportant%E9%80%89%E6%8B%A9%E5%99%A8.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/类important选择器.jpg) --></li>
<li>伪类选择器——权重 <strong>[0，0，1，0]</strong><pre><code> :hover (和其它选择器搭配使用，两者中间没有空格) &#123;
     属性名：属性值；
 &#125;
</code></pre>
<img src="/2020/09/24/CSS/%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/伪类选择器.jpg) --></li>
<li>id选择器——权重 <strong>[0，1，0，0]</strong><pre><code> #id (id名) &#123;
     属性名：属性值；
 &#125;
</code></pre>
<img src="/2020/09/24/CSS/id%E9%80%89%E6%8B%A9%E5%99%A8.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/id选择器.jpg) --></li>
<li>!important——权重 <strong>无限大(提升属性权重)</strong><pre><code> 选择器 &#123;
     属性名：属性值 !important；(提升属性权重)
 &#125;
</code></pre>
<img src="/2020/09/24/CSS/%E7%B1%BBimportant%E9%80%89%E6%8B%A9%E5%99%A8.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/类important选择器.jpg) -->
根据层叠性.class中height：1300px应该覆盖掉上一个.class中的属性，但是由于!important在，权重为无限大，于是不会被覆盖</li>
</ol>
<hr>
<img src="/2020/09/24/CSS/%E6%99%AE%E9%80%9A%E9%80%89%E6%8B%A9%E5%99%A8.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/普通选择器.jpg) -->

<hr>
<p><em>复合选择器</em></p>
<hr>
<img src="/2020/09/24/CSS/%E5%A4%8D%E5%90%88%E9%80%89%E6%8B%A9%E5%99%A8.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/复合选择器.jpg) -->
<hr>
<ol>
<li>后代选择器<img src="/2020/09/24/CSS/%E5%90%8E%E4%BB%A3%E9%80%89%E6%8B%A9%E5%99%A80.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/后代选择器0.jpg) --></li>
</ol>
<p><strong>选择器每次在后代中选择一个，每个选择器之间用空格隔开</strong></p>
<img src="/2020/09/24/CSS/%E5%90%8E%E4%BB%A3%E9%80%89%E6%8B%A9%E5%99%A81.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/后代选择器1.jpg) -->
<p><em>如图通过后代选择器选择.son一项，将其颜色改为了紫色</em><br>2. 子元素选择器</p>
<img src="/2020/09/24/CSS/%E5%AD%90%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A80.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/子元素选择器0.jpg) -->
<p><strong>两选择器通过[&gt;]连接，只选择次一级元素</strong></p>
<img src="/2020/09/24/CSS/%E5%AD%90%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A81.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/子元素选择器1.jpg) -->
<p><em>.grandpa的次一级子元素有二.dad和.sis，则选中后只将二者变成紫色</em><br>3. 交集选择器</p>
<img src="/2020/09/24/CSS/%E4%BA%A4%E9%9B%86%E9%80%89%E6%8B%A9%E5%99%A80.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/交集选择器0.jpg) -->
<img src="/2020/09/24/CSS/%E4%BA%A4%E9%9B%86%E9%80%89%E6%8B%A9%E5%99%A80-0.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/交集选择器0-0.jpg) -->
<p><strong>交集选择器必须指定元素名，通过选择元素名的类(.bor)或者id(#bor)来指定选择器</strong></p>
<img src="/2020/09/24/CSS/%E4%BA%A4%E9%9B%86%E9%80%89%E6%8B%A9%E5%99%A81.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/交集选择器1.jpg) -->
<p><em>只有div和.bor(div和#bor)同时满足时才会修改选择器中的属性</em><br>4. 并集选择器</p>
<img src="/2020/09/24/CSS/%E5%B9%B6%E9%9B%86%E9%80%89%E6%8B%A9%E5%99%A80.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/并集选择器0.jpg) -->
<p><strong>通过[ , ]逗号分开的两个或多个选择器会被一起选中赋予相同的属性</strong></p>
<img src="/2020/09/24/CSS/%E5%B9%B6%E9%9B%86%E9%80%89%E6%8B%A9%E5%99%A81.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/并集选择器1.jpg) -->
<p><em>通过并集选择器选中了.son和.sis就被赋予了相同的属性和值</em></p>
<h3 id="Ⅳ-CSS的显示模式"><a href="#Ⅳ-CSS的显示模式" class="headerlink" title="Ⅳ.CSS的显示模式"></a>Ⅳ.CSS的显示模式</h3><p><strong>1. 块级元素（block）</strong></p>
<ul>
<li><ol>
<li>独自占据一行</li>
</ol>
</li>
<li><ol start="2">
<li>可以设置宽（width）高（height）</li>
</ol>
</li>
<li><ol start="3">
<li>默认宽度为继承宽度</li>
</ol>
</li>
<li><ol start="4">
<li>内部可以放置block、inline-block、inline</li>
</ol>
</li>
<li><ol start="5">
<li>文字类块级盒子（如p、h、dt）内不再放置块级元素</li>
</ol>
</li>
</ul>
<p><strong>2. 行内元素inline</strong></p>
<ul>
<li><ol>
<li>一行内可以显示多个元素</li>
</ol>
</li>
<li><ol start="2">
<li>宽（width）高（height）设置均无法识别</li>
</ol>
</li>
<li><ol start="3">
<li>宽度即为自身的内容</li>
</ol>
</li>
<li><ol start="4">
<li>只能容纳单纯的文字或者其他行内元素</li>
</ol>
</li>
<li><ol start="5">
<li>不识别上下的内外边距</li>
</ol>
</li>
</ul>
<p><strong>3. 行内块元素（inline-block）</strong></p>
<ul>
<li><ol>
<li>可以在一行内放置多个元素，但每个元素之间存在空隙</li>
</ol>
</li>
<li><ol start="2">
<li>可以设置宽（width）和高（height）</li>
</ol>
</li>
<li><ol start="3">
<li>默认宽度为自身内容宽度</li>
</ol>
</li>
<li><ol start="4">
<li>可以识别上下左右的内外边距</li>
</ol>
</li>
</ul>
<p><strong>4. display</strong></p>
<ul>
<li><ol>
<li>该属性可以调整元素的显示方式</li>
</ol>
</li>
<li><ol start="2">
<li>display：block——转换成块级元素</li>
</ol>
</li>
<li><ol start="3">
<li>display：inline——转换成行内元素</li>
</ol>
</li>
<li><ol start="4">
<li>display：inline-block——转换成行内级元素</li>
</ol>
</li>
<li><ol start="5">
<li>display：none——可以隐藏元素的显示<h3 id="Ⅴ-CSS网页布局"><a href="#Ⅴ-CSS网页布局" class="headerlink" title="Ⅴ.CSS网页布局"></a>Ⅴ.CSS网页布局</h3></li>
</ol>
</li>
</ul>
<p><strong>盒子模型</strong></p>
<img src="/2020/09/24/CSS/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.jpg" class="" title="This is an test image">
<!-- ![](../_posts/CSS/盒子模型.jpg) -->
<ol>
<li>外边距(margin)<ul>
<li>i.可以通过margin-（top、right、bottom、left）分别设置也可以一起设置<ul>
<li>设置时注意书写[一个属性值]时表示为上下左右外边距都是该属性值</li>
<li>设置时注意书写[两个属性值]时第一个属性值表示上下，第二个属性值表示左右</li>
<li>设置时注意书写[三个属性值]时第一个属性值表示上，第二个属性值表示左右，第三个属性值表示下</li>
<li>设置时注意书写[四个属性值]时第一个表示上，第二个表示右，第三个表示下，第四个表示左</li>
</ul>
</li>
<li>ii.可以通过margin：0 auto的方式实现盒子的水平居中显示（前提为元素盒子必须有宽度）</li>
<li>iii.上下排列的盒子会出现bug（即上盒子有下外边距，下盒子有上外边距时只会显示外边距大的数值），因此设置上下外边距时上下相邻盒子只设置一个外边距</li>
</ul>
</li>
<li>边框(border)<ul>
<li>i.边框粗细（width）样式（style）颜色（color）</li>
<li>ii. 合并边框时可以使用border-collapse：collapse（合并相邻的边框）</li>
</ul>
</li>
<li>内边距(padding)<ul>
<li>i.可以通过padding-（top、right、bottom、left）分别设置也可以一起设置<ul>
<li>设置时注意书写[一个属性值]时表示为上下左右外边距都是该属性值</li>
<li>设置时注意书写[两个属性值]时第一个属性值表示上下，第二个属性值表示左右</li>
<li>设置时注意书写[三个属性值]时第一个属性值表示上，第二个属性值表示左右，第三个属性值表示下</li>
<li>设置时注意书写[四个属性值]时第一个表示上，第二个表示右，第三个表示下，第四个表示左</li>
</ul>
</li>
<li>ii.盒子自身具备宽（width）高（height）属性时padding会撑开盒子</li>
</ul>
</li>
<li>内容(content)<ul>
<li>盒子的大小 = 内容大小 + 内边距 + 边框</li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JS操作对象的14中方法</title>
    <url>/2021/03/10/JS%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>ECMAScript</strong>委员会对对象操作有<strong>14</strong>中方法（直接操作对象，跟对象操作有关方法）</p>
<p><strong>JS 存在许多关键字形的指令，而许多底层方法都是函数式的，更容易读懂，也更容易维护</strong></p>
<span id="more"></span>

<h3 id="1-获取原型-GetPrototypeOf"><a href="#1-获取原型-GetPrototypeOf" class="headerlink" title="1.获取原型 [[GetPrototypeOf]]"></a>1.获取原型 [[GetPrototypeOf]]</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法层面 -- Object.getPrototypeOf(obj)</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> proto = <span class="built_in">Object</span>.getPrototypeOf(obj) <span class="comment">// 底层API</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;proto&#x27;</span>, proto)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;obj.__proto__&#x27;</span>, obj.__proto__) <span class="comment">// 实例对象的原型容器</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Object.prototype&#x27;</span>, <span class="built_in">Object</span>.prototype) <span class="comment">// 构造函数的原型属性</span></span><br></pre></td></tr></table></figure>

<img src="/2021/03/10/JS%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/GetPrototypeOf.jpg" class="" title="This is an test image">

<!-- ![GetPrototypeOf](./JS操作对象的14中方法/GetPrototypeOf.jpg) -->

<h3 id="2-设置原型-SetPrototypeOf"><a href="#2-设置原型-SetPrototypeOf" class="headerlink" title="2.设置原型 [[SetPrototypeOf]]"></a>2.设置原型 [[SetPrototypeOf]]</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, &#123; <span class="attr">e</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;) <span class="comment">// 函数式(易读)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;setPrototypeOf&#x27;</span>, obj)</span><br><span class="line">obj.__proto__ = &#123; <span class="attr">e</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span>, <span class="attr">f</span>: <span class="number">5</span> &#125; <span class="comment">// 赋值式</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;__proto__&#x27;</span>, obj)</span><br></pre></td></tr></table></figure>

<img src="/2021/03/10/JS%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/SetPrototypeOf.jpg" class="" title="This is an test image">

<!-- ![SetPrototypeOf](./JS操作对象的14中方法/SetPrototypeOf.jpg) -->

<h3 id="3-获取对象的可扩展性-IsExtensible"><a href="#3-获取对象的可扩展性-IsExtensible" class="headerlink" title="3.获取对象的可扩展性 [[IsExtensible]]"></a>3.获取对象的可扩展性 [[IsExtensible]]</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> extensible = <span class="built_in">Object</span>.isExtensible(obj)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;isExtensible&#x27;</span>, extensible) <span class="comment">// 可扩展</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.freeze(obj) <span class="comment">// 对象冻结 - 不能修改，不可删除，不可写入，可读(枚举)</span></span><br><span class="line"><span class="keyword">var</span> extensible = <span class="built_in">Object</span>.isExtensible(obj)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;isExtensible&#x27;</span>, <span class="string">&#x27;freeze&#x27;</span>, extensible) <span class="comment">// 不可扩展</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.seal(obj) <span class="comment">// 对象封闭 - 不能修改，不可删除，可写入，可读(枚举)</span></span><br><span class="line"><span class="keyword">var</span> extensible = <span class="built_in">Object</span>.isExtensible(obj)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;isExtensible&#x27;</span>, <span class="string">&#x27;seal&#x27;</span>, extensible) <span class="comment">// 不可扩展</span></span><br></pre></td></tr></table></figure>

<img src="/2021/03/10/JS%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/IsExtensible.jpg" class="" title="This is an test image">

<!-- ![IsExtensible](./JS操作对象的14中方法/IsExtensible.jpg) -->

<h3 id="4-获取自有属性-GetOwnProperty"><a href="#4-获取自有属性-GetOwnProperty" class="headerlink" title="4.获取自有属性 [[GetOwnProperty]]"></a>4.获取自有属性 [[GetOwnProperty]]</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">own</span>: <span class="string">&#x27;property&#x27;</span> &#125;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, &#123; <span class="attr">d</span>: <span class="number">4</span>, <span class="attr">e</span>: <span class="number">5</span>, <span class="attr">f</span>: <span class="number">6</span> &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// 只能是自有属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(obj)) <span class="comment">// 获取自有属性名</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">&#x27;own&#x27;</span>)) <span class="comment">// 获取指定自有属性的描述符</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnProperty(obj)) <span class="comment">// 没有单独方法</span></span><br></pre></td></tr></table></figure>

<img src="/2021/03/10/JS%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/GetOwnProperty.jpg" class="" title="This is an test image">

<!-- ![GetOwnProperty](./JS操作对象的14中方法/GetOwnProperty.jpg) -->

<h3 id="5-禁止扩展对象-PreventExtensions"><a href="#5-禁止扩展对象-PreventExtensions" class="headerlink" title="5.禁止扩展对象 [[PreventExtensions]]"></a>5.禁止扩展对象 [[PreventExtensions]]</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">c</span>: <span class="string">&#x27;1&#x27;</span> &#125;</span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(obj)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(k, obj[k])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// 可读(枚举)</span></span><br><span class="line">obj.d = <span class="number">0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;add&#x27;</span>, obj) <span class="comment">// 不可添加(写入)</span></span><br><span class="line"><span class="keyword">delete</span> obj.a</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;delete&#x27;</span>, obj) <span class="comment">// 可删除</span></span><br></pre></td></tr></table></figure>

<img src="/2021/03/10/JS%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/PreventExtension.jpg" class="" title="This is an test image">

<!-- ![PreventExtension](./JS操作对象的14中方法/PreventExtension.jpg) -->

<h3 id="6-拦截对象操作-DefineOwnProperty"><a href="#6-拦截对象操作-DefineOwnProperty" class="headerlink" title="6.拦截对象操作 [[DefineOwnProperty]]"></a>6.拦截对象操作 [[DefineOwnProperty]]</h3><blockquote>
<p>对象属性存在如下描述符：</p>
<ul>
<li><code>configurable</code> – 是否可配置</li>
<li><code>enumerable</code> – 是否可枚举</li>
<li><code>value</code> – 属性值</li>
<li><code>writable</code> – 是否可写</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;A&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">//defineProperty(要拦截的对象,属性名称,&#123;描述器&#125;)</span></span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;src&#x27;</span>, obj)</span><br><span class="line">obj.B = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;add&#x27;</span>, obj) <span class="comment">// 允许新加属性</span></span><br><span class="line"></span><br><span class="line">obj.A = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;change&#x27;</span>, obj) <span class="comment">// 默认writable 为 false 不允许-改写-属性A</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obj.A</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;delete&#x27;</span>, obj) <span class="comment">// 默认configurable 为 false 不允许-删除-属性A</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认enumerable 为 false 不许-枚举-属性A</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(k, obj[k])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/03/10/JS%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/defineProperty.jpg" class="" title="This is an test image">

<!-- ![defineProperty](./JS操作对象的14中方法/defineProperty.jpg) -->

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</span><br><span class="line">  <span class="comment">// defineProperties可以采用对象统一设置</span></span><br><span class="line">  a: &#123;</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="number">1</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  b: &#123;</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="number">2</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _default = <span class="number">0</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;a&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//defineProperty 存在get方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">`拦截了a的获取==&gt;取得值<span class="subst">$&#123;_default&#125;</span>`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//defineProperty 存在set方法</span></span><br><span class="line">    _default = value</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">`拦截了a的设置==&gt;设置为<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// [set,get] 和 [value,writable] 互斥，两组里任意一个属性和另一组内任意属性同时出现会报错</span></span><br><span class="line">obj.a</span><br><span class="line">obj.a = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<img src="/2021/03/10/JS%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/get$set.jpg" class="" title="This is an test image">

<!-- ![get$set](./JS操作对象的14中方法/get$set.jpg) -->

<h3 id="7-判断是否是自有属性-HasProperty"><a href="#7-判断是否是自有属性-HasProperty" class="headerlink" title="7.判断是否是自有属性 [[HasProperty]]"></a>7.判断是否是自有属性 [[HasProperty]]</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hasOwnProperty&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, obj.hasOwnProperty(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hasOwnProperty&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, obj.hasOwnProperty(<span class="string">&#x27;b&#x27;</span>))</span><br></pre></td></tr></table></figure>

<img src="/2021/03/10/JS%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/HasProperty.jpg" class="" title="This is an test image">

<!-- ![HasProperty](./JS操作对象的14中方法/HasProperty.jpg) -->

<h3 id="8-GET"><a href="#8-GET" class="headerlink" title="8.[[GET]]"></a>8.[[GET]]</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">e</span>: <span class="number">7</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;c in obj&#x27;</span>, <span class="string">&#x27;c&#x27;</span> <span class="keyword">in</span> obj) <span class="comment">// get机制一般用于判断属性(自有属性、原型属性都包含)是否在对象中</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;e in obj&#x27;</span>, <span class="string">&#x27;e&#x27;</span> <span class="keyword">in</span> obj)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;obj.a&#x27;</span>, obj.a) <span class="comment">// 基于get机制可实现了对象的点取值等</span></span><br></pre></td></tr></table></figure>

<img src="/2021/03/10/JS%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/GET.jpg" class="" title="This is an test image">

<!-- ![GET](./JS操作对象的14中方法/GET.jpg) -->

<h3 id="9-SET"><a href="#9-SET" class="headerlink" title="9.[[SET]]"></a>9.[[SET]]</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">obj.a = <span class="number">3</span></span><br><span class="line">obj.e = <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure>

<img src="/2021/03/10/JS%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/SET.jpg" class="" title="This is an test image">

<!-- ![SET](./JS操作对象的14中方法/SET.jpg) -->

<h3 id="10-Delete"><a href="#10-Delete" class="headerlink" title="10.[[Delete]]"></a>10.[[Delete]]</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">3</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;src&#x27;</span>, obj)</span><br><span class="line"><span class="keyword">delete</span> obj.a</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;delete&#x27;</span>, obj)</span><br></pre></td></tr></table></figure>

<img src="/2021/03/10/JS%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/Delete.jpg" class="" title="This is an test image">

<!-- ![Delete](./JS操作对象的14中方法/Delete.jpg) -->

<h3 id="11-Enumerate"><a href="#11-Enumerate" class="headerlink" title="11.[[Enumerate]]"></a>11.[[Enumerate]]</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现出来的功能</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(k, obj[k])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/03/10/JS%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/Enumerate.jpg" class="" title="This is an test image">

<!-- ![Enumerate](./JS操作对象的14中方法/Enumerate.jpg) -->

<h3 id="12-自有属性键集合-OwnPropertyKeys"><a href="#12-自有属性键集合-OwnPropertyKeys" class="headerlink" title="12.自有属性键集合 [[OwnPropertyKeys]]"></a>12.自有属性键集合 [[OwnPropertyKeys]]</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;src&#x27;</span>, obj)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;OwnPropertyKeys&#x27;</span>, <span class="built_in">Object</span>.keys(obj))</span><br></pre></td></tr></table></figure>

<img src="/2021/03/10/JS%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/OwnPropertyKeys.jpg" class="" title="This is an test image">

<!-- ![OwnPropertyKeys](./JS操作对象的14中方法/OwnPropertyKeys.jpg) -->

<h3 id="13-调用函数"><a href="#13-调用函数" class="headerlink" title="13.调用函数"></a>13.调用函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">test() <span class="comment">// 引用值的调用</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">obj.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">obj.test()</span><br></pre></td></tr></table></figure>

<h3 id="14-实例化对象"><a href="#14-实例化对象" class="headerlink" title="14.实例化对象"></a>14.实例化对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">new</span> Test() <span class="comment">// 实例化对象的操作</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Web学习的亿点细节---亿点点୧(๑•̀⌄•́๑)૭碉堡了</title>
    <url>/2021/03/10/Web%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%BA%BF%E7%82%B9%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<h4 id="1-在js中需要number类型的数据可以在数据之前加“-”"><a href="#1-在js中需要number类型的数据可以在数据之前加“-”" class="headerlink" title="1.在js中需要number类型的数据可以在数据之前加“+”"></a>1.在js中需要number类型的数据可以在数据之前加“+”</h4><img src="/2021/03/10/Web%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%BA%BF%E7%82%B9%E7%BB%86%E8%8A%82/number.jpg" class="" title="This is an test image">
<!-- ![number](./Web学习的亿点细节/number.jpg) -->
<h4 id="2-清空数组的操作"><a href="#2-清空数组的操作" class="headerlink" title="2.清空数组的操作"></a>2.清空数组的操作</h4><ul>
<li><p>1、重新赋值为[]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr = [];</span><br></pre></td></tr></table></figure></li>
<li><p>2、设置数组长度为0</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>3、把数组中的所有数据删除</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.splice(<span class="number">0</span>,arr.length);</span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
</ul>
<h4 id="3-Js赋值样式时需要添加单位"><a href="#3-Js赋值样式时需要添加单位" class="headerlink" title="3.Js赋值样式时需要添加单位"></a>3.Js赋值样式时需要添加单位</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = [变量值];</span><br><span class="line">element.style.width = x + <span class="string">&#x27;px&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="4-querySelectorAll和children的区别"><a href="#4-querySelectorAll和children的区别" class="headerlink" title="4.querySelectorAll和children的区别"></a>4.querySelectorAll和children的区别</h4><ul>
<li>querySelectorAll：获取的元素集合是静态集合——拿到数据之后就不管之后的变化了</li>
<li>children：获取到的元素是动态集合——拿到数据之后还会动态更新数据</li>
</ul>
<h4 id="5-removeEventListener传入函数体是不能移除事件的，需要传入注册事件时相同函数的函数名（注册监听事件的事件函数不是函数体）"><a href="#5-removeEventListener传入函数体是不能移除事件的，需要传入注册事件时相同函数的函数名（注册监听事件的事件函数不是函数体）" class="headerlink" title="5.removeEventListener传入函数体是不能移除事件的，需要传入注册事件时相同函数的函数名（注册监听事件的事件函数不是函数体）"></a>5.removeEventListener传入函数体是不能移除事件的，需要传入注册事件时相同函数的函数名（注册监听事件的事件函数不是函数体）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">removeEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//这样是不能删除监听器注册事件的</span></span><br><span class="line">------------------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">addEventListener(<span class="string">&#x27;click&#x27;</span>, demo)</span><br><span class="line">removeEventListener(<span class="string">&#x27;click&#x27;</span>, demo)</span><br><span class="line"><span class="comment">//需要填入的是同一函数的函数名</span></span><br></pre></td></tr></table></figure>

<h4 id="6-阻止a标签跳转的小手段"><a href="#6-阻止a标签跳转的小手段" class="headerlink" title="6.阻止a标签跳转的小手段"></a>6.阻止a标签跳转的小手段</h4><p><code>&lt;a href=&quot;javascript:viod(0);&quot;&gt;&lt;/a&gt;</code></p>
<ul>
<li>href=”javascript:viod(0);’’—意思是不跳转，去执行js代码</li>
<li>js代码为空就间接的阻止了a标签的跳转</li>
</ul>
<h4 id="7-HTMLElement-offsetParent-是一个只读属性，返回一个指向最近的（指包含层级上的最近）包含该元素的定位元素或者最近的-table-td-th-body元素。当元素的-style-display-设置为-“none”-时，offsetParent-返回-null。offsetParent-很有用，因为-offsetTop-和-offsetLeft-都是相对于其内边距边界的。"><a href="#7-HTMLElement-offsetParent-是一个只读属性，返回一个指向最近的（指包含层级上的最近）包含该元素的定位元素或者最近的-table-td-th-body元素。当元素的-style-display-设置为-“none”-时，offsetParent-返回-null。offsetParent-很有用，因为-offsetTop-和-offsetLeft-都是相对于其内边距边界的。" class="headerlink" title="7.HTMLElement.offsetParent 是一个只读属性，返回一个指向最近的（指包含层级上的最近）包含该元素的定位元素或者最近的 table,td,th,body元素。当元素的 style.display 设置为 “none” 时，offsetParent 返回 null。offsetParent 很有用，因为 offsetTop 和 offsetLeft 都是相对于其内边距边界的。"></a>7.HTMLElement.offsetParent 是一个只读属性，返回一个指向最近的（指包含层级上的最近）包含该元素的定位元素或者最近的 table,td,th,body元素。当元素的 style.display 设置为 “none” 时，offsetParent 返回 null。offsetParent 很有用，因为 offsetTop 和 offsetLeft 都是相对于其内边距边界的。</h4><h4 id="8-通过constructor判断数据类型"><a href="#8-通过constructor判断数据类型" class="headerlink" title="8.通过constructor判断数据类型"></a>8.通过constructor判断数据类型</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">typeof</span> arr<span class="comment">//object</span></span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span><span class="comment">//true</span></span><br><span class="line">arr.__proto__.constructor === <span class="built_in">Array</span><span class="comment">//true</span></span><br><span class="line">arr.constructor === <span class="built_in">Array</span><span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h4 id="9-允许我们在function-箭头函数中-对形参赋予默认值形参的默认值—-当不传入参数的时候-形参的值是undefined-会被默认值覆盖掉"><a href="#9-允许我们在function-箭头函数中-对形参赋予默认值形参的默认值—-当不传入参数的时候-形参的值是undefined-会被默认值覆盖掉" class="headerlink" title="9.允许我们在function ()/ 箭头函数中, 对形参赋予默认值形参的默认值—-当不传入参数的时候(形参的值是undefined), 会被默认值覆盖掉"></a>9.允许我们在function ()/ 箭头函数中, 对形参赋予默认值形参的默认值—-当不传入参数的时候(形参的值是undefined), 会被默认值覆盖掉</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认值作用: 防止在不传递参数时, 有问题</span></span><br><span class="line"><span class="comment">// function fnOne(a, b)&#123;</span></span><br><span class="line"><span class="comment">//     console.log(a + b);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// fnOne();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其实想在不传数字时, 默认是0+0, 但是现在是undefined相加(结果是NaN了)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnOne</span>(<span class="params">a = <span class="number">0</span>, b = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line">fnOne();</span><br><span class="line">fnOne(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fnTwo = <span class="function">(<span class="params">a = <span class="number">0</span>, b = <span class="number">0</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line">fnTwo();</span><br><span class="line">fnTwo(<span class="number">100</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure>
<h4 id="10-对象中属性名的访问和值的访问"><a href="#10-对象中属性名的访问和值的访问" class="headerlink" title="10.对象中属性名的访问和值的访问"></a>10.对象中属性名的访问和值的访问</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span>  obj = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj);<span class="comment">//将所有key保存在数组里</span></span><br><span class="line"><span class="built_in">Object</span>.values(obj);<span class="comment">//将所有value保存在数组里</span></span><br></pre></td></tr></table></figure>
<h4 id="11-JQuery中的输入框事件"><a href="#11-JQuery中的输入框事件" class="headerlink" title="11.JQuery中的输入框事件"></a>11.JQuery中的输入框事件</h4><ul>
<li><p>JQuery中输入框事件(input)不是方法，需要如下方式使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;selector&#x27;</span>).on(<span class="string">&#x27;input&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>))</span></span><br></pre></td></tr></table></figure>
<h4 id="12-在定位中通过设置right和left为0可以使得定位元素宽度撑满定位标准的父盒子，top、bottom同理"><a href="#12-在定位中通过设置right和left为0可以使得定位元素宽度撑满定位标准的父盒子，top、bottom同理" class="headerlink" title="12.在定位中通过设置right和left为0可以使得定位元素宽度撑满定位标准的父盒子，top、bottom同理"></a>12.在定位中通过设置right和left为0可以使得定位元素宽度撑满定位标准的父盒子，top、bottom同理</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/03/10/Web%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%BA%BF%E7%82%B9%E7%BB%86%E8%8A%82/%E5%85%B3%E4%BA%8E%E5%AE%9A%E4%BD%8D%E7%9A%84%E5%B0%8Ftip.jpg" class="" title="This is an test image">
<!-- ![关于定位的小tip](./Web学习的亿点细节/关于定位的小tip.jpg) -->
<h4 id="13-form表单会默认跳转到action属性对应的网址，不写默认会跳转自身，一般阻止表单默认跳转，e-preventDefault—阻止默认事件"><a href="#13-form表单会默认跳转到action属性对应的网址，不写默认会跳转自身，一般阻止表单默认跳转，e-preventDefault—阻止默认事件" class="headerlink" title="13.form表单会默认跳转到action属性对应的网址，不写默认会跳转自身，一般阻止表单默认跳转，e.preventDefault—阻止默认事件"></a>13.form表单会默认跳转到action属性对应的网址，不写默认会跳转自身，一般阻止表单默认跳转，e.preventDefault—阻止默认事件</h4><h4 id="14-在网页中复制DOM树"><a href="#14-在网页中复制DOM树" class="headerlink" title="14.在网页中复制DOM树"></a>14.在网页中复制DOM树</h4><img src="/2021/03/10/Web%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%BA%BF%E7%82%B9%E7%BB%86%E8%8A%82/copyDOMtree.jpg" class="" title="This is an test image">
<!-- ![copyDOMtree](./Web学习的亿点细节/copyDOMtree.jpg) -->
<img src="/2021/03/10/Web%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%BA%BF%E7%82%B9%E7%BB%86%E8%8A%82/DOMtree.jpg" class="" title="This is an test image">
<!-- ![DOMtree](./Web学习的亿点细节/DOMtree.jpg) --></li>
</ul>
<h4 id="15-模本引擎语法支持字符串方法"><a href="#15-模本引擎语法支持字符串方法" class="headerlink" title="15.模本引擎语法支持字符串方法"></a>15.模本引擎语法支持字符串方法</h4>]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/03/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo博客的搭建整理总结</title>
    <url>/2020/09/11/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="本次博客搭建教程来源如下"><a href="#本次博客搭建教程来源如下" class="headerlink" title="本次博客搭建教程来源如下:"></a>本次博客搭建教程来源如下:</h2><img src="/2020/09/11/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/%E8%A7%86%E9%A2%91%E5%8F%82%E8%80%83.jpg" class="" title="This is an test image">
<!-- ![](/source/_posts/hexo博客的搭建/视频参考.jpg) -->

<p><a href="https://www.bilibili.com/video/BV1Yb411a7ty?t=1677">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a></p>
<span id="more"></span>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><ul>
<li>安装node.js+git<ul>
<li>hexo就是基于node的静态博客</li>
</ul>
</li>
</ul>
<img src="/2020/09/11/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/node.js.jpg" class="" title="This is an test image">
<!-- ![](/source/_posts/hexo博客的搭建/node.js.jpg) -->

<p>就百度就行，安装基本下一步……</p>
<ul>
<li>windows下的话就win+R进入cmd</li>
</ul>
<img src="/2020/09/11/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/%E5%BC%80%E5%90%AF%E7%BB%88%E7%AB%AF.jpg" class="" title="This is an test image">
<!-- ![](/source/_posts/hexo博客的搭建/开启终端.jpg) -->

<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><ul>
<li>安装hexo<ul>
<li>npm可能安装比较慢所以用npm安装cnpm然后再安装hexo</li>
</ul>
</li>
</ul>
<img src="/2020/09/11/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/cnpm%E5%AE%89%E8%A3%85.jpg" class="" title="This is an test image">
<!-- ![](/source/_posts/hexo博客的搭建/cnpm安装.jpg) -->
<p>如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<!-- ![](/source/_posts/hexo博客的搭建/hexo-cli安装.jpg) -->

<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><ul>
<li>建立一个文件夹存放所有的博客文件，错了就删了重来就行</li>
</ul>
<p>初始化博客</p>
<img src="/2020/09/11/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8D%9A%E5%AE%A2.jpg" class="" title="This is an test image">
<!-- ![](/source/_posts/hexo博客的搭建/初始化博客.jpg) -->

<p>看到如下就是初始化完成哒</p>
<img src="/2020/09/11/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%88%90.jpg" class="" title="This is an test image">
<!-- ![](/source/_posts/hexo博客的搭建/初始化博客完成.jpg) -->

<p>可在本地端口打开</p>
<img src="/2020/09/11/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/%E5%8F%AF%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E6%89%93%E5%BC%80.jpg" class="" title="This is an test image">
<!-- ![](/source/_posts/hexo博客的搭建/可在本地端口打开.jpg) -->

<p>复制网址到在浏览器就能在本地预览了</p>
<p>一些基础命令</p>
<img src="/2020/09/11/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4.jpg" class="" title="This is an test image">
<!-- ![](/source/_posts/hexo博客的搭建/基础命令.jpg) -->

<p>这是框架自动生成的博客就叫helloworld</p>
<p>hexo new “My New Post”——生成新的文章页</p>
<p>hexo s(server)——本地启动，简写s就行</p>
<p>hexo g(generate)——重新生成，基本就是修改之后hexo<br>clean 然后重新生成</p>
<p>hexo d(deploy)——部署到远端</p>
<h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><ul>
<li>通过Github把博客部署到远端<ul>
<li>要用远端部署需要先下载一个git部署插件</li>
</ul>
</li>
</ul>
<img src="/2020/09/11/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85git%E9%83%A8%E7%BD%B2%E6%8F%92%E4%BB%B6.jpg" class="" title="This is an test image">
<!-- ![](/source/_posts/hexo博客的搭建/安装git部署插件.jpg) -->

<p>如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>
<ul>
<li>登录github建立新的仓库<ul>
<li>注意就仓库和ID要一致 .gihub.io</li>
</ul>
</li>
</ul>
<img src="/2020/09/11/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/github%E6%9E%84%E5%BB%BA%E4%BB%93%E5%BA%93%E5%9F%BA%E7%A1%80%E5%91%BD%E5%90%8D%E5%BF%85%E9%A1%BB%E4%B8%80%E8%87%B4.jpg" class="" title="This is an test image">
<!-- ![](/source/_posts/hexo博客的搭建/github构建仓库基础命名必须一致.jpg) -->

<ul>
<li>然后就需要设置啦<br>  +找到如下文件，文件里找到最后面</li>
</ul>
<img src="/2020/09/11/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/%E6%9B%B4%E6%94%B9%E9%85%8D%E7%BD%AE.jpg" class="" title="This is an test image">
<!-- ![](/source/_posts/hexo博客的搭建/更改配置.jpg) -->
<img src="/2020/09/11/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/%E6%9B%B4%E6%94%B9%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF.jpg" class="" title="This is an test image">
<!-- ![](/source/_posts/hexo博客的搭建/更改配置信息.jpg) -->
<p>type: git</p>
<p>rerp(就是远程仓库哒): bulabula……</p>
<p>branch(分支): master</p>
<p>ps:分支好像默认就是master，还有记得冒号后面跟空格</p>
<p>然后就可以hexo d往远端推了</p>
<img src="/2020/09/11/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/%E6%AD%A4%E6%97%B6git%E4%BB%93%E5%BA%93%E9%87%8C%E5%B0%B1%E6%9C%89%E5%BE%88%E5%A4%9A%E4%B8%9C%E8%A5%BF%E4%BA%86.jpg" class="" title="This is an test image">
<!-- ![](/source/_posts/hexo博客的搭建/此时git仓库里就有很多东西了.jpg) -->

<h3 id="关于换主题那些事情"><a href="#关于换主题那些事情" class="headerlink" title="关于换主题那些事情"></a>关于换主题那些事情</h3><ul>
<li>找到想要的主题下载下来就好啦 git clone<ul>
<li>之后找到配置文件更改主题就好啦</li>
</ul>
</li>
</ul>
<img src="/2020/09/11/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/%E6%9B%B4%E6%94%B9%E9%85%8D%E7%BD%AE.jpg" class="" title="This is an test image">
<!-- ![](/source/_posts/hexo博客的搭建/更改配置.jpg) -->

<p>默认就是搭建的时候自动下载的主题哒</p>
<img src="/2020/09/11/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/%E6%8D%A2%E6%88%90%E6%83%B3%E8%A6%81%E7%9A%84%E4%B8%BB%E9%A2%98.jpg" class="" title="This is an test image">
<!-- ![](/source/_posts/hexo博客的搭建/换成想要的主题.jpg) -->

<p>landscape删掉换成新主题就好啦</p>
<p>然后就能生成本地预览查看是否设置哒</p>
<p>然后hexo d就能推到远端啦</p>
<hr>
<p>结尾の言葉:</p>
<p>还在摸索中，前端也是，博客也是，要坚持下去啊</p>
]]></content>
      <tags>
        <tag>整理总结</tag>
      </tags>
  </entry>
  <entry>
    <title>超文本标记语言——HTML</title>
    <url>/2020/09/16/label/</url>
    <content><![CDATA[<h3 id="html骨架"><a href="#html骨架" class="headerlink" title="html骨架"></a>html骨架</h3><p>!DOCTYPE html——文档类型[HTML 5]<br>html lang=”en”——语言显示<br>meta charset=”UTF-8”——编码规范[字符集]</p>
<h3 id="标签语义化"><a href="#标签语义化" class="headerlink" title="标签语义化"></a>标签语义化</h3><span id="more"></span>
<p><strong>排版标签</strong></p>
<ol>
<li>标题标签——h1~h6[双标签]</li>
<li>段落标签——p[双标签]</li>
<li>水平线标签——hr[单标签]</li>
<li>换行标签——br[单标签]</li>
<li>div和span标签——div、span[双标签]</li>
</ol>
<p><strong>文本格式化标签</strong></p>
<ol>
<li>b、strong——加粗[双标签]</li>
<li>i、em——斜体[双标签]</li>
<li>s、del——删除线[双标签]</li>
<li>u、ins——下划线[双标签]<br>ps：后者语义强烈</li>
</ol>
<p><strong>标签属性(图片标签)</strong></p>
<ol>
<li>src——源(图像路径)</li>
<li>alt——替换文本</li>
<li>title——提示文本</li>
<li>width——宽度</li>
<li>height——高度(二者选一即可)</li>
<li>border——带边框</li>
</ol>
<p><strong>连接标签</strong></p>
<ol>
<li>href——链接地址</li>
<li>target——打开方式(_blank——开一个新标签页，默认覆盖自身页面)</li>
</ol>
<p><strong>base标签</strong><br>base target=”_blank”——所有连接都是新标签页打开[单标签]</p>
<p><strong>预格式化文本</strong><br>pre——标签里面怎么写怎么显示，基本不咋用[双标签]</p>
<p><strong>特殊字符</strong></p>
<ol>
<li>[空格]——[&nbsp;]</li>
<li>[&lt;]——[&lt;]</li>
<li>[&gt;]——[&gt;]</li>
</ol>
<p><strong>表格(table)</strong></p>
<ol>
<li>table——双标签</li>
<li>tr——行[双标签]</li>
<li>td——行内数据(单元格)[双标签]<br>标签属性：border、width、height、align[水平对齐方式]、cellspacing(外边距单元格之间)、cellpadding(内边距，单元格内数据和单元格边的距离)</li>
<li>th——表头单元格[文字居中加粗][重点在，th是单元格不是行row]</li>
<li>caption——表格标题[双标签，置于table之内，tr、th之上]</li>
</ol>
<p><strong>合并单元格</strong></p>
<ol>
<li>rowspan——夸行[合并后删除多余单元格]</li>
<li>colspan——跨列[合并后删除多余单元格]</li>
</ol>
<p><strong>表格结构划分</strong></p>
<ol>
<li>thead——表格头部区域[必须有tr标签]</li>
<li>tbody——表格内容区域</li>
<li>tfoot——表格尾注部分</li>
</ol>
<p><strong>列表标签</strong></p>
<ol>
<li>无序列表——ul&gt;li[无序]</li>
<li>有序列表——ol&gt;li[有序]</li>
<li>自定义列表——dl&gt;dt(主题)&gt;dd(根据主题的分支，解释说明)[有一个主题和他的分支]</li>
</ol>
<p><strong>表单标签</strong></p>
<ol>
<li>input——单标签[input type=” “ value=” “ name=” “ id=” “]<br>属性: type value<blockquote>
<p>text——文本框<br>password——密码框<br>radio——单选按钮<br>checkbox——复选按钮</p>
</blockquote>
</li>
</ol>
<p>value：显示表单内的内容(表单值)<br>name：表单的名字[单选按钮同名则只能选取一个]<br>checked=”checked”——[属性][表示默认选中]</p>
<blockquote>
<p>button——普通按钮<br>submit——提交按钮<br>reset——重置按钮<br>image——图像形式的提交按钮(此项要scr属性表示图片来源)<br>file——文件域(上传头像类似这种表单)</p>
</blockquote>
<ol start="2">
<li><p>label标签——扩大标签点击范围<br>用法：</p>
<blockquote>
<ol>
<li>包含input表单</li>
<li>通过for(=”id”)和id(input中id=””)</li>
</ol>
</blockquote>
</li>
<li><p>textarea——文本域类似留言板[双标签]<br>文本框是单一行，文本域能多行显示输入</p>
</li>
<li><p>select——下拉列表[内包含option标签，在双标签option内填写内容]</p>
</li>
</ol>
<p><strong>表单域</strong><br>form action=”url地址”[提交到哪里] method=”提交方式”[怎么提交] name=”表单姓名”[提交了啥]</p>
<blockquote>
<p>action——url地址<br>method——get/post<br>name——表单姓名</p>
</blockquote>
<p>推荐网站：<br><a href="https://developer.mozilla.org/zh-CN/">MDN</a><br><a href="https://www.w3school.com.cn/index.html">w3school</a></p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>静态网页书写的亿点细节---亿点点୧(๑•̀⌄•́๑)૭碉堡了</title>
    <url>/2021/03/10/%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E4%B9%A6%E5%86%99%E7%9A%84%E4%BA%BF%E7%82%B9%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<h1 id="1-亿些-class-的命名（目前学习中常会用到的一些）"><a href="#1-亿些-class-的命名（目前学习中常会用到的一些）" class="headerlink" title="1.亿些 class 的命名（目前学习中常会用到的一些）"></a>1.亿些 class 的命名（目前学习中常会用到的一些）</h1><ul>
<li><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><ul>
<li><h3 id="header—网页头部"><a href="#header—网页头部" class="headerlink" title="header—网页头部"></a>header—网页头部</h3></li>
<li><h3 id="shortcut—快捷导航（网页头部搜索栏）"><a href="#shortcut—快捷导航（网页头部搜索栏）" class="headerlink" title="shortcut—快捷导航（网页头部搜索栏）"></a>shortcut—快捷导航（网页头部搜索栏）</h3></li>
<li><h3 id="banner—网页广告区域（轮播图…）"><a href="#banner—网页广告区域（轮播图…）" class="headerlink" title="banner—网页广告区域（轮播图…）"></a>banner—网页广告区域（轮播图…）</h3></li>
<li><h3 id="nav—网页导航区域"><a href="#nav—网页导航区域" class="headerlink" title="nav—网页导航区域"></a>nav—网页导航区域</h3></li>
<li><h3 id="aside—侧边栏"><a href="#aside—侧边栏" class="headerlink" title="aside—侧边栏"></a>aside—侧边栏</h3></li>
<li><h3 id="main—网页主要内容"><a href="#main—网页主要内容" class="headerlink" title="main—网页主要内容"></a>main—网页主要内容</h3></li>
<li><h3 id="footer—网页底部"><a href="#footer—网页底部" class="headerlink" title="footer—网页底部"></a>footer—网页底部</h3></li>
</ul>
<span id="more"></span></li>
<li><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li><h3 id="logo—网页的徽标（一般用-h1-包括）"><a href="#logo—网页的徽标（一般用-h1-包括）" class="headerlink" title="logo—网页的徽标（一般用 h1 包括）"></a>logo—网页的徽标（一般用 h1 包括）</h3></li>
<li><h3 id="login—登录"><a href="#login—登录" class="headerlink" title="login—登录"></a>login—登录</h3></li>
<li><h3 id="register—注册"><a href="#register—注册" class="headerlink" title="register—注册"></a>register—注册</h3></li>
<li><h3 id="hot—热搜"><a href="#hot—热搜" class="headerlink" title="hot—热搜"></a>hot—热搜</h3></li>
<li><h3 id="news—新闻"><a href="#news—新闻" class="headerlink" title="news—新闻"></a>news—新闻</h3></li>
<li><h3 id="icon—小图标"><a href="#icon—小图标" class="headerlink" title="icon—小图标"></a>icon—小图标</h3></li>
<li><h3 id="search—搜索"><a href="#search—搜索" class="headerlink" title="search—搜索"></a>search—搜索</h3></li>
<li><h3 id="service—服务"><a href="#service—服务" class="headerlink" title="service—服务"></a>service—服务</h3></li>
<li><h3 id="btn—按钮"><a href="#btn—按钮" class="headerlink" title="btn—按钮"></a>btn—按钮</h3></li>
</ul>
</li>
</ul>
<h1 id="2-浮动带来的亿些负面影响"><a href="#2-浮动带来的亿些负面影响" class="headerlink" title="2.浮动带来的亿些负面影响"></a>2.浮动带来的亿些负面影响</h1><ul>
<li><blockquote>
<p>浮动元素的父元素没有设置确定的高度的话，</p>
<p>那么子元素浮动后是不会撑开父盒子的，</p>
<p>如果不清除浮动父盒子是没有高度的，</p>
<p>其后的标准流盒子会紧贴在 0 高度的父盒子之下。</p>
<p>ps：浮动元素是不会遮盖文字的</p>
</blockquote>
<img src="/2021/03/10/%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E4%B9%A6%E5%86%99%E7%9A%84%E4%BA%BF%E7%82%B9%E7%BB%86%E8%8A%82/float.jpg" class="" title="This is an test image">

<!-- ![float](./静态网页书写的亿点细节/float.jpg) -->

<img src="/2021/03/10/%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E4%B9%A6%E5%86%99%E7%9A%84%E4%BA%BF%E7%82%B9%E7%BB%86%E8%8A%82/%E6%96%87%E5%AD%97%E7%8E%AF%E7%BB%95.jpg" class="" title="This is an test image">

<!-- ![文字环绕](./静态网页书写的亿点细节/文字环绕.jpg) --></li>
<li><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><ul>
<li><h3 id="1-清除浮动就是清除浮动带来的弊端"><a href="#1-清除浮动就是清除浮动带来的弊端" class="headerlink" title="1.清除浮动就是清除浮动带来的弊端"></a>1.清除浮动就是清除浮动带来的弊端</h3></li>
<li><h3 id="2-原理："><a href="#2-原理：" class="headerlink" title="2.原理："></a>2.原理：</h3><blockquote>
<p>在<strong>父元素</strong>中添加一个<strong>块级</strong>元素来闭合浮动</p>
<p>语法：选择器{clear：both；}（一般是 both—同时清除左右两侧浮动的影响）</p>
</blockquote>
</li>
<li><h3 id="3-方法"><a href="#3-方法" class="headerlink" title="3.方法"></a>3.方法</h3><blockquote>
<ol>
<li>添加额外标签</li>
</ol>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给父元素内最后一个浮动元素的后面添加一个块级元素</span></span><br><span class="line"><span class="comment">在那个块级元素css样式上添加clear属性和both属性值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ol start="2">
<li>父元素添加 overflow：hidden；—通过触发浏览器<strong>块级格式化上下文</strong>机制清除浮动</li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li>伪元素法</li>
</ol>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">  content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol start="4">
<li>双伪元素法</li>
</ol>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:before,</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">  content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/03/10/%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E4%B9%A6%E5%86%99%E7%9A%84%E4%BA%BF%E7%82%B9%E7%BB%86%E8%8A%82/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8.jpg" class="" title="This is an test image">

<!-- ![清除浮动](./静态网页书写的亿点细节/清除浮动.jpg) --></li>
</ul>
</li>
</ul>
<h1 id="3-亿些小-tips"><a href="#3-亿些小-tips" class="headerlink" title="3.亿些小 tips"></a>3.亿些小 tips</h1><ul>
<li><h3 id="1-chrome-中，浏览默认字体大小-16px，最小字体-12px，可以通过设置更改默认的字体和最小字体（存在比例缩放时字体最小固定-12px-影响布局的情况可以更改设置），整-0px-时字体消失，负值时-CSS-样式失效"><a href="#1-chrome-中，浏览默认字体大小-16px，最小字体-12px，可以通过设置更改默认的字体和最小字体（存在比例缩放时字体最小固定-12px-影响布局的情况可以更改设置），整-0px-时字体消失，负值时-CSS-样式失效" class="headerlink" title="1. chrome 中，浏览默认字体大小 16px，最小字体 12px，可以通过设置更改默认的字体和最小字体（存在比例缩放时字体最小固定 12px 影响布局的情况可以更改设置），整 0px 时字体消失，负值时 CSS 样式失效"></a>1. chrome 中，浏览默认字体大小 16px，最小字体 12px，可以通过设置更改默认的字体和最小字体（存在比例缩放时字体最小固定 12px 影响布局的情况可以更改设置），整 0px 时字体消失，负值时 CSS 样式失效</h3></li>
<li><h3 id="2-行内块元素（如-img，input）"><a href="#2-行内块元素（如-img，input）" class="headerlink" title="2.行内块元素（如 img，input）"></a>2.行内块元素（如 img，input）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;saber.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">如此换行排列，换行也会合并成一个空格，就导致了行内块元素之间会存在间隙;</span></span><br><span class="line"><span class="comment">并且在行内块元素和文字对齐时候是默认基线对齐的，所以会出现错位情况;</span></span><br><span class="line"><span class="comment">PS:下图图片其实是和input表单控件中的文字基线对齐的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2021/03/10/%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E4%B9%A6%E5%86%99%E7%9A%84%E4%BA%BF%E7%82%B9%E7%BB%86%E8%8A%82/%E7%A9%BA%E6%A0%BC.jpg" class="" title="This is an test image">

<!-- ![空格](./静态网页书写的亿点细节/空格.jpg) -->

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;saber.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle;&quot;</span> /&gt;</span>&lt;input</span><br><span class="line">  type=&quot;text&quot;</span><br><span class="line">  value=&quot;saber&quot;</span><br><span class="line">/&gt;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	如果两个标签并排不空格，则不会出现空隙；</span></span><br><span class="line"><span class="comment">	通过给需要的标签添加vertical-align:属性值;可以改变和文字的对齐方式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2021/03/10/%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E4%B9%A6%E5%86%99%E7%9A%84%E4%BA%BF%E7%82%B9%E7%BB%86%E8%8A%82/middle.jpg" class="" title="This is an test image">

<!-- ![middle](./静态网页书写的亿点细节/middle.jpg) --></li>
<li><h3 id="3-网页中的-logo-和新闻标题会用-h1-标签，logo-使用背景图，中间添加文字（用于-seo-优化），文字影藏可以是溢出影藏，或者文字-font-size-为-0，来不影响-logo-图片的美观，其它情况则从-h2-开始用"><a href="#3-网页中的-logo-和新闻标题会用-h1-标签，logo-使用背景图，中间添加文字（用于-seo-优化），文字影藏可以是溢出影藏，或者文字-font-size-为-0，来不影响-logo-图片的美观，其它情况则从-h2-开始用" class="headerlink" title="3.网页中的 logo 和新闻标题会用 h1 标签，logo 使用背景图，中间添加文字（用于 seo 优化），文字影藏可以是溢出影藏，或者文字 font-size 为 0，来不影响 logo 图片的美观，其它情况则从 h2 开始用"></a>3.网页中的 logo 和新闻标题会用 h1 标签，logo 使用背景图，中间添加文字（用于 seo 优化），文字影藏可以是溢出影藏，或者文字 font-size 为 0，来不影响 logo 图片的美观，其它情况则从 h2 开始用</h3></li>
<li><h3 id="4-书写好习惯，添加类名，添加类名，添加类名，不然标签一多，一些常用的标签的样式很容易出现层叠现象"><a href="#4-书写好习惯，添加类名，添加类名，添加类名，不然标签一多，一些常用的标签的样式很容易出现层叠现象" class="headerlink" title="4.书写好习惯，添加类名，添加类名，添加类名，不然标签一多，一些常用的标签的样式很容易出现层叠现象"></a>4.书写好习惯，添加类名，添加类名，添加类名，不然标签一多，一些常用的标签的样式很容易出现层叠现象</h3></li>
<li><h3 id="5-写代码记得保存，写代码记得保存，写代码记得保存，代码不保存时会处于内存中，一旦掉电就没有了，所以一定要及时保存"><a href="#5-写代码记得保存，写代码记得保存，写代码记得保存，代码不保存时会处于内存中，一旦掉电就没有了，所以一定要及时保存" class="headerlink" title="5.写代码记得保存，写代码记得保存，写代码记得保存，代码不保存时会处于内存中，一旦掉电就没有了，所以一定要及时保存"></a>5.写代码记得保存，写代码记得保存，写代码记得保存，代码不保存时会处于内存中，一旦掉电就没有了，所以一定要及时保存</h3></li>
<li><h3 id="6-利用行高居中时，line-height-是-content（内容）高度，通过-box-sizing-border-box-代码后-height-是实际盒子高度"><a href="#6-利用行高居中时，line-height-是-content（内容）高度，通过-box-sizing-border-box-代码后-height-是实际盒子高度" class="headerlink" title="6.利用行高居中时，line-height 是 content（内容）高度，通过 box-sizing: border-box;代码后 height 是实际盒子高度"></a>6.利用行高居中时，line-height 是 content（内容）高度，通过 box-sizing: border-box;代码后 height 是实际盒子高度</h3></li>
<li><h3 id="7-定位时是依据内容（content）的位置移动的（在边框之内）"><a href="#7-定位时是依据内容（content）的位置移动的（在边框之内）" class="headerlink" title="7.定位时是依据内容（content）的位置移动的（在边框之内）"></a>7.定位时是依据内容（content）的位置移动的（在边框之内）</h3><img src="/2021/03/10/%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E4%B9%A6%E5%86%99%E7%9A%84%E4%BA%BF%E7%82%B9%E7%BB%86%E8%8A%82/%E5%AE%9A%E4%BD%8D.jpg" class="" title="This is an test image">

<!-- ![定位](./静态网页书写的亿点细节/定位.jpg) --></li>
<li><h3 id="8-伪类中的结构伪类-first-child、-last-child、-nth-child"><a href="#8-伪类中的结构伪类-first-child、-last-child、-nth-child" class="headerlink" title="8.伪类中的结构伪类:first-child、:last-child、:nth-child()"></a>8.伪类中的结构伪类:first-child、:last-child、:nth-child()</h3><blockquote>
<p>均表示在父元素中<strong>所有</strong>子元素排序后存在的位置，如果添加结构伪类的元素<strong>排位和代码给的排位顺序不符合</strong>则 css 样式将不在该元素上生效</p>
<p>此时可以用:nth-of-type()，表示<strong>添加伪类的这一类元素</strong>在父元素中排序后的位置</p>
</blockquote>
</li>
<li><h3 id="9-弹性盒子（display：flex；）中只有设置换行（flex-wrap：warp；—默认不换行），才能换行"><a href="#9-弹性盒子（display：flex；）中只有设置换行（flex-wrap：warp；—默认不换行），才能换行" class="headerlink" title="9.弹性盒子（display：flex；）中只有设置换行（flex-wrap：warp；—默认不换行），才能换行"></a>9.弹性盒子（display：flex；）中只有设置换行（flex-wrap：warp；—默认不换行），才能换行</h3></li>
<li><h3 id="10-移动端书写时-viewport（视口）需要设置完全，书写不完全可能会出现屏幕缩小时内容一直缩小"><a href="#10-移动端书写时-viewport（视口）需要设置完全，书写不完全可能会出现屏幕缩小时内容一直缩小" class="headerlink" title="10.移动端书写时 viewport（视口）需要设置完全，书写不完全可能会出现屏幕缩小时内容一直缩小"></a>10.移动端书写时 viewport（视口）需要设置完全，书写不完全可能会出现屏幕缩小时内容一直缩小</h3></li>
</ul>
<hr>
<h1 id="to-be-continue…"><a href="#to-be-continue…" class="headerlink" title="to be continue…"></a>to be continue…</h1>]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
